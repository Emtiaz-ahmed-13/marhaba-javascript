//18.421
/*
JavaScript ‡¶è‡¶ï‡¶ü‡¶ø Single-Threaded, Non-Blocking, Asynchronous, ‡¶è‡¶¨‡¶Ç Interpreted (JIT Compiled) ‡¶≠‡¶æ‡¶∑‡¶æ, ‡¶Ø‡¶æ Call Stack, Web APIs, Callback Queue, ‡¶è‡¶¨‡¶Ç Event Loop ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡¶° ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶ü ‡¶ï‡¶∞‡ßá‡•§

JavaScript Execution Process (‡¶ß‡¶æ‡¶™‡ßá ‡¶ß‡¶æ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ)
Parsing & Compilation:

JavaScript ‡¶ï‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Parsing (Syntax Analysis) ‡¶π‡ßü‡•§

‡¶è‡¶∞‡¶™‡¶∞ ‡¶è‡¶ü‡¶ø JIT (Just-In-Time) Compiler-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∂‡¶ø‡¶® ‡¶ï‡ßã‡¶°‡ßá ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞‡¶ø‡¶§ ‡¶π‡ßü‡•§

Execution Context Creation:

Global Execution Context (GEC) ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡•§

Function Execution Context (FEC) ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡•§

Call Stack Execution:

Synchronous ‡¶ï‡ßã‡¶° Call Stack-‡¶è ‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡ßü ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ï‡ßç‡¶∏‡¶ø‡¶ï‡¶ø‡¶â‡¶ü ‡¶π‡ßü‡•§

Async Code Handling (Web APIs, Callback Queue & Event Loop):

Asynchronous ‡¶ï‡ßã‡¶° (e.g., setTimeout, fetch()) Web APIs-‡¶è ‡¶Ø‡¶æ‡ßü‡•§

Event Loop ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶¶‡¶ø Call Stack ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá Callback Queue ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶æ‡¶ú ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡ßá‡•§

*/

//18.422
/*
‚úÖ JavaScript is a high-level, interpreted (JIT-compiled), dynamically typed, prototype-based, single-threaded programming language that is mainly used for web development.

üîπ Key Features of JavaScript
Single-threaded & Event-driven

Dynamically Typed (No need to declare variable types explicitly)

Prototype-based Object Orientation

Asynchronous (Non-blocking with Promises, Async/Await)

JIT Compiled (Faster execution)

Cross-platform (Works on Browsers, Node.js, etc.)

üîπ Uses of JavaScript
Frontend Development (React, Vue, Angular)

Backend Development (Node.js, Express.js)

Game Development (Three.js, Phaser.js)

Machine Learning (TensorFlow.js)

Desktop Apps (Electron.js)
*/

//18.423

/*
JIT (Just-In-Time) Compilation is a technique where JavaScript is compiled just before execution instead of interpreting line by line.

Here's a simple flowchart for JIT Compilation:

plaintext
Copy
Edit
+-----------------------+
|  JavaScript Code      |
+-----------------------+
        ‚¨á
+-----------------------+
|  Parsing (Syntax Check) |
+-----------------------+
        ‚¨á
+-----------------------+
|  AST (Abstract Syntax Tree) |
+-----------------------+
        ‚¨á
+-----------------------+
|  Bytecode Generation |
+-----------------------+
        ‚¨á
+-----------------------+
|  JIT Compilation (Hot Code Optimization) |
+-----------------------+
        ‚¨á
+-----------------------+
|  Machine Code Execution |
+-----------------------+
JIT Compilation Steps in JavaScript V8 Engine (Used in Chrome & Node.js):
Parsing: JavaScript is converted into an Abstract Syntax Tree (AST).

Bytecode Generation: AST is translated into bytecode (intermediate representation).

JIT Compilation: Frequently used code ("Hot Code") is optimized and compiled into machine code.

Execution: Optimized code is directly executed in the CPU.

‚úÖ JIT Compilation makes JavaScript execution faster compared to traditional interpretation. üöÄ
*/

//18.424


/*
JavaScript automatically manages memory allocation and deallocation using Garbage Collection (GC).

üîπ How JavaScript Manages Memory?
Memory Allocation:

JavaScript allocates memory when creating variables, objects, or functions.

Memory Usage (Execution Phase):

JavaScript uses the allocated memory during execution.

Garbage Collection (GC):

When objects are no longer referenced, they are automatically removed from memory.

JavaScript uses the Mark-and-Sweep Algorithm for garbage collection.

Mark-and-Sweep Algorithm (Step-by-Step):
Mark Phase:

The garbage collector finds all reachable objects (i.e., objects still in use).

Sweep Phase:

The unreachable objects are removed from memory to free up space.
*/